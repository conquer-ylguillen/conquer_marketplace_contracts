/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MarketplaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addNFTToMarketplace"
      | "buyConquerNFT"
      | "erc20Contract"
      | "getAvailableNFTs"
      | "getERC20Address"
      | "getNFTAddress"
      | "nftContract"
      | "nftPrice"
      | "onERC721Received"
      | "owner"
      | "renounceOwnership"
      | "rewardTokens"
      | "setNftPrice"
      | "setRewardTokens"
      | "transferOwnership"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "NFTAddedToMarketplace"
      | "NFTPurchased"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addNFTToMarketplace",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "buyConquerNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "erc20Contract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableNFTs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getERC20Address",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nftPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setNftPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addNFTToMarketplace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyConquerNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20Contract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getERC20Address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNftPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace NFTAddedToMarketplaceEvent {
  export type InputTuple = [tokenId: BigNumberish];
  export type OutputTuple = [tokenId: bigint];
  export interface OutputObject {
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTPurchasedEvent {
  export type InputTuple = [to: AddressLike, tokenId: BigNumberish];
  export type OutputTuple = [to: string, tokenId: bigint];
  export interface OutputObject {
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Marketplace extends BaseContract {
  connect(runner?: ContractRunner | null): Marketplace;
  waitForDeployment(): Promise<this>;

  interface: MarketplaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addNFTToMarketplace: TypedContractMethod<
    [tokenURI: string],
    [void],
    "nonpayable"
  >;

  buyConquerNFT: TypedContractMethod<
    [tokenId: BigNumberish],
    [void],
    "payable"
  >;

  erc20Contract: TypedContractMethod<[], [string], "view">;

  getAvailableNFTs: TypedContractMethod<[], [bigint[]], "view">;

  getERC20Address: TypedContractMethod<[], [string], "view">;

  getNFTAddress: TypedContractMethod<[], [string], "view">;

  nftContract: TypedContractMethod<[], [string], "view">;

  nftPrice: TypedContractMethod<[], [bigint], "view">;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rewardTokens: TypedContractMethod<[], [bigint], "view">;

  setNftPrice: TypedContractMethod<
    [_nftPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRewardTokens: TypedContractMethod<
    [_rewardTokens: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addNFTToMarketplace"
  ): TypedContractMethod<[tokenURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "buyConquerNFT"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "erc20Contract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAvailableNFTs"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getERC20Address"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getNFTAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nftContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nftPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardTokens"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setNftPrice"
  ): TypedContractMethod<[_nftPrice: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRewardTokens"
  ): TypedContractMethod<[_rewardTokens: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "NFTAddedToMarketplace"
  ): TypedContractEvent<
    NFTAddedToMarketplaceEvent.InputTuple,
    NFTAddedToMarketplaceEvent.OutputTuple,
    NFTAddedToMarketplaceEvent.OutputObject
  >;
  getEvent(
    key: "NFTPurchased"
  ): TypedContractEvent<
    NFTPurchasedEvent.InputTuple,
    NFTPurchasedEvent.OutputTuple,
    NFTPurchasedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "NFTAddedToMarketplace(uint256)": TypedContractEvent<
      NFTAddedToMarketplaceEvent.InputTuple,
      NFTAddedToMarketplaceEvent.OutputTuple,
      NFTAddedToMarketplaceEvent.OutputObject
    >;
    NFTAddedToMarketplace: TypedContractEvent<
      NFTAddedToMarketplaceEvent.InputTuple,
      NFTAddedToMarketplaceEvent.OutputTuple,
      NFTAddedToMarketplaceEvent.OutputObject
    >;

    "NFTPurchased(address,uint256)": TypedContractEvent<
      NFTPurchasedEvent.InputTuple,
      NFTPurchasedEvent.OutputTuple,
      NFTPurchasedEvent.OutputObject
    >;
    NFTPurchased: TypedContractEvent<
      NFTPurchasedEvent.InputTuple,
      NFTPurchasedEvent.OutputTuple,
      NFTPurchasedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
